import { MigrationInterface, QueryRunner, getRepository, getCustomRepository } from 'typeorm';
import { UserRepository } from '../repositories/user/user-repository';

export class CreateTask1631039710974 implements MigrationInterface {
	public async up(queryRunner: QueryRunner): Promise<void> {
		const usersRepository = getCustomRepository(UserRepository);
		const exampleData = [
			{
				name: 'Captcha parser',
				discipline: 'fundamentals',
				rank: 4,
				allowContributors: true,
				description:
					"**Description:**\n\nYou are given a simple captcha, comprised of numbers and various noises. Your task in order to complete this Challengeis to write a function which parses captcha and returns numbers, which captcha contains.\n\n**Preconditions**\n\nNumbers may contain the following characters:``` '_', '|', '\\', '/'.```\nPossible values of numbers:``` 1, 2, 3, 4, 5, 6, 7, 8, 9.```\nCaptcha are represented as string, where ```'\\n'``` is separator of new line and all lines have the same length.\nUnder the noise refers to all the characters and figures, which are not parsed as a number. Noise may contain all possible symbols (including``` '_', '|', '\\', '/'```) except ```'\\n'```.\nThe result of the challenge must be presented as a string with numbers, which are sorted in ascending order.\nYou should not worry that the numbers may overlap with each other. It is not required for the solution.\nSamples of numbers\n ```\nOne           Two             Three         Four           Five\n.......................................................................\n.___...........____............____............./|..........____|......\n....|..............|............../............/.|..........|..........\n....|..............|............./............/..|..........|___.......\n....|..............|./...........\\.........../___|..............|......\n....|..............|/..........___\\..............|..........____| .....\n....|............................................|.....................\n.......................................................................\n.......................................................................\n Six          Seven         Eight         Nine                         \n.......................................................................\n.______.......______........____............___........................\n.|............|.../.........|...|...........|__|_......................\n.|___............/..........|___|..............|.......................\n.|...|........._/_..........|...|..............|.......................\n.|___|........./............|___|.........|____|.......................\n............../........................................................\n.......................................................................```\nExample of input strings(capt—Åha)\n .......................................................................\n ...____123.............................................................\n ......|................................................................\n ......||...............................................................\n ......|=__.................. __|___ ...................................\n ......|......................0.........................................\n ......|......................|____.....................................\n .............................|....|....................................\n .............................|____|....................................\n .......................................................................\n ...parsed as '1'.......................................................\n .......................................................................",
				completeSolution:
					"const digits = [\r\n    ['___ ', '   |', '   |', '   |', '   |', '   |'],\r\n    ['____   ', '    |  ', '    |  ', '    | /', '    |/ '],\r\n    ['____', '   /', '  / ', '  \\\\ ', '___\\\\'],\r\n    ['   /|', '  / |', ' /  |', '/___|', '    |', '    |'],\r\n    ['____|', '|    ', '|___ ', '    |', '____|'],\r\n    ['______', '|     ', '|___  ', '|   | ', '|___| '],\r\n    ['______', '|   / ', '   /  ', ' _/_  ', ' /    ', '/     '],\r\n    ['____ ', '|   |', '|___|', '|   |', '|___|'],\r\n    ['  ___  ', '  |__|_', '     | ', '     | ', '|____| ']\r\n]\r\n\r\nfunction captchaParser(captcha) {\r\n    captcha = captcha.split('\\n');\r\n    function scan(y, x, d, h, w) {\r\n        for (let j=0; j<h; j++)\r\n            for (let i=0; i<w; i++)\r\n                if (d[j][i] != ' ' && captcha[y+j][x+i] != d[j][i])\r\n                    return false;\r\n        return true;\r\n    }\r\n    var out = [];\r\n    let ch = captcha.length;\r\n    let cw = captcha[0].length;\r\n    for (let n=1; n<10; n++) {\r\n        let d = digits[n-1];\r\n        let h = d.length;\r\n        let w = d[0].length;\r\n        for (let y=0; y<=ch-h; y++)\r\n            for (let x=0; x<=cw-w; x++)\r\n                if (scan(y, x, d, h, w))\r\n                    out.push(n);\r\n    }\r\n    return out.join('');\r\n}",

				initialSolution:
					'/**\r\n * @param {string} captcha\r\n * @returns {string}\r\n */\r\nfunction captchaParser(captcha) {\r\n}',

				testCases:
					"var one = ['___', '   |', '   |', '   |', '   |', '   |'];\r\nvar two = ['____', '    |', '    |', '    | /', '    |/'];\r\nvar three = ['____', '   /', '  /', '  \\\\', '___\\\\'];\r\nvar four = ['   /|', '  / |', ' /  |', '/___|', '    |', '    |'];\r\nvar five = ['____|', '|', '|___', '    |', '____|'];\r\nvar six = ['______', '|', '|___', '|   |', '|___|'];\r\nvar seven = ['______', '|   /', '   /', ' _/_', ' /', '/'];\r\nvar eight = ['____', '|   |', '|___|', '|   |', '|___|'];\r\nvar nine = ['   ___', '   |__|_', '      |', '      |', ' |____|'];\r\nvar numbers = [null, one, two, three, four, five, six, seven, eight, nine];\r\n\r\nvar getRandom = (min, max)=> Math.round(Math.random() * (max - min) + min);\r\nvar getRandomChar = function () {\r\n    var charset = \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-+=\";\r\n    return charset.charAt(Math.floor(Math.random() * charset.length));\r\n\r\n};\r\nvar getRandomNumber = () =>getRandom(1, 9);\r\nvar getOffset = () =>getRandom(1, 5);\r\nvar maxOffset = 10;\r\n\r\nfunction beautifyError(captcha, expected) {\r\n    return `captchaParser for ${captcha} \\n\\n must return ${expected};`\r\n}\r\n\r\nvar assert= require('assert');\r\n\r\ndescribe(\"basic cases\", function () {\r\n\r\n\r\n    it(\"none\", function () {\r\n        let none = ` `;\r\n\r\n        assert.strictEqual(captchaParser(none), '', beautifyError(none, ''));\r\n    });\r\n\r\n    it(\"one\", function () {\r\n        let one = `    \r\n___ \r\n   |\r\n   |\r\n   |\r\n   |\r\n   |`;\r\n\r\n        assert.strictEqual(captchaParser(one), '1', beautifyError(one, 1));\r\n    });\r\n\r\n    it(\"two\", function () {\r\n        let two = `       \r\n____   \r\n    |  \r\n    |  \r\n    | /\r\n    |/ `;\r\n\r\n        assert.strictEqual(captchaParser(two), '2', beautifyError(two, 2));\r\n    });\r\n\r\n    it(\"three\", function () {\r\n        let three = `     \r\n____ \r\n   / \r\n  /  \r\n  \\\\ \r\n___\\\\ `;\r\n\r\n        assert.strictEqual(captchaParser(three), '3', beautifyError(three, 3));\r\n    });\r\n\r\n    it(\"four\", function () {\r\n        let four = `     \r\n   /|\r\n  / |\r\n /  |\r\n/___|\r\n    |\r\n    |`;\r\n\r\n        assert.strictEqual(captchaParser(four), '4', beautifyError(four, 4));\r\n    });\r\n\r\n    it(\"five\", function () {\r\n        let five = `     \r\n____|\r\n|    \r\n|___ \r\n    |\r\n____|`;\r\n\r\n        assert.strictEqual(captchaParser(five), '5', beautifyError(five, 5));\r\n    });\r\n\r\n    it(\"six\", function () {\r\n        let six = `      \r\n______\r\n|     \r\n|___  \r\n|   | \r\n|___| `;\r\n\r\n        assert.strictEqual(captchaParser(six), '6', beautifyError(six, 6));\r\n    });\r\n\r\n    it(\"seven\", function () {\r\n        let seven = `      \r\n______\r\n|   / \r\n   /  \r\n _/_  \r\n /    \r\n/     `;\r\n\r\n        assert.strictEqual(captchaParser(seven), '7', beautifyError(seven, 7));\r\n    });\r\n\r\n    it(\"eight\", function () {\r\n        let eight = `     \r\n____ \r\n|   |\r\n|___|\r\n|   |\r\n|___|`;\r\n\r\n        assert.strictEqual(captchaParser(eight), '8', beautifyError(eight, 8));\r\n    });\r\n\r\n    it(\"nine\", function () {\r\n        let nine = `        \r\n   ___  \r\n   |__|_\r\n      | \r\n      | \r\n |____| `;\r\n\r\n        assert.strictEqual(captchaParser(nine), '9', beautifyError(nine, 9));\r\n    });\r\n\r\n    it(\"one && five\", function () {\r\n        let oneAndFive = `                                                      \r\n        ___                                           \r\n           |                                          \r\n           |                                          \r\n           |                           ____|          \r\n           |                           |              \r\n           |                           |___           \r\n                                           |          \r\n                                       ____|          \r\n                                                      `;\r\n\r\n        assert.strictEqual(captchaParser(oneAndFive), '15', beautifyError(oneAndFive, 15));\r\n    });\r\n\r\n    it(\"six && two with noise\", function () {\r\n        let sixAndTwo = `                                                      \r\n                                                      \r\n                 ______                               \r\n                 |                                    \r\n                 |___                                 \r\n                 |   |                                \r\n                 |___|                                \r\n                                                      \r\n                                                      \r\n                                                      \r\n                 ____                                 \r\n                     |                                 \r\n                     |                                 \r\n                     | /                               \r\n                     |/                                \r\n                                                      \r\n                                                      `;\r\n\r\n        assert.strictEqual(captchaParser(sixAndTwo), '26', beautifyError(sixAndTwo, 26));\r\n    });\r\n\r\n});\r\ndescribe(\"complex cases\", function () {\r\n\r\n    it(\"1954\", function () {\r\n        let a1954 = `                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                       ___                                                                                              \r\n        ___            |__|_                                                                                            \r\n           |              |                                                                                             \r\n           |              |                                         /|                                                  \r\n           |         |____|            ____|                       / |                                                  \r\n           |                           |                          /  |                                                  \r\n           |                           |___                      /___|                                                  \r\n                                           |                         |                                                  \r\n                                       ____|                         |                                                  \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        `;\r\n\r\n        assert.strictEqual(captchaParser(a1954), '1459', beautifyError(a1954, 1459));\r\n    });\r\n\r\n    it(\"1954 with noise\", function () {\r\n        let a1954 = `                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n           ---         ___   ___                                                                                        \r\n        ___            |__|_                             ____          123                                              \r\n           |              |                                                                                             \r\n           |              |                                         /|                                                  \r\n           |         |____|            ____|                       / |                                                  \r\n           |                    |      |               |          /  |                                                  \r\n           |                     |     |___            |         /___|                                                  \r\n                                           |                         |                                                  \r\n           /                           ____|                         |                                                  \r\n            /  wwwwww                                                                                                   \r\n                                                                                                                        \r\n                                                        __                                                              \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        `;\r\n\r\n        assert.strictEqual(captchaParser(a1954), '1459', beautifyError(a1954, 1459));\r\n    });\r\n\r\n    it(\"1954 with noise - 2\", function () {\r\n        let a1954 = `                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n           ---         ___   ___                                                                                        \r\n        ___            |__|_                             ____          123                                              \r\n           |              |                                                                                             \r\n           |              |                                         /|                                                  \r\n           |         |____|            ____|                       / |                                                  \r\n           |                    |      |               |          /  |                                                  \r\n           |                     |     |___            |         /___|                                                  \r\n                                           |                         |                                                  \r\n           /                           ____|                         |                                                  \r\n            /  wwwwww                                                                                                   \r\n                                                                                                                        \r\n                                                        __                                                              \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        `\r\n            .replace(/ /g, 0);\r\n\r\n        assert.strictEqual(captchaParser(a1954), '1459', beautifyError(a1954, 1459));\r\n    });\r\n\r\n    it(\"8876237\", function () {\r\n        var a8876237 = `                                                                                                                        \r\n____                                                                                                                    \r\n|   |                                                                                                                   \r\n|___|                  ______                                                                                           \r\n|   |                  |   /                                ____                                                        \r\n|___|                     /                                    /                                                        \r\n                        _/_                                   /                                                         \r\n                        /                                     \\\\                                                         \r\n              ____     /                                    ___\\\\                                                        \r\n              |   |                            ____                                                                     \r\n              |___|                                |                             ______                                  \r\n              |   |                                |                             |   /                                  \r\n              |___|                                | /                              /                                   \r\n                                ______             |/                             _/_                                   \r\n                                |                                                 /                                     \r\n                                |___                                             /                                      \r\n                                |   |                                                                                   \r\n                                |___|                                                                                   `;\r\n\r\n        assert.strictEqual(captchaParser(a8876237), '2367788', beautifyError(a8876237, 2367788));\r\n    });\r\n\r\n    it(\"837 with noise\", function () {\r\n        var a837 = `                                                                                                                        \r\n____                                                                                                                    \r\n|   |                                                                                                                   \r\n|___|                  ______                                                                                           \r\n|   |                  |   /                                ____                                                        \r\n|                        /                                     /                                                        \r\n|___|                   ///                                   /                                                         \r\n                        /                                     \\\\                                                         \r\n              ____     /                                    ___\\\\                                                        \r\n              |   |                            ____                                                                     \r\n              |___|                                |                             ______                                  \r\n              |   |                                                              |   /                                  \r\n              |___|                                | /                              /                                   \r\n                                __ ___             |/                             _/_                                   \r\n                                |                                                 /                                     \r\n                                |___                                             /                                      \r\n                                |   |                                                                                   \r\n                                |___|                                                                                   `;\r\n\r\n        assert.strictEqual(captchaParser(a837), '378', beautifyError(a837, 378));\r\n    });\r\n\r\n    it(\"837 with noise - 2\", function () {\r\n        var a837 = `                                                                                                                        \r\n____                                                                                                                    \r\n|   |                                                                                                                   \r\n|___|                  ______                                                                                           \r\n|   |                  |   /                                ____                                                        \r\n|                        /                                     /                                                        \r\n|___|                   ///                                   /                                                         \r\n                        /                                     \\\\                                                         \r\n              ____     /                                    ___\\\\                                                        \r\n              |   |                            ____                                                                     \r\n              |___|                                |                             ______                                  \r\n              |   |                                                              |   /                                  \r\n              |___|                                | /                              /                                   \r\n                                __ ___             |/                             _/_                                   \r\n                                |                                                 /                                     \r\n                                |___                                             /                                      \r\n                                |   |                                                                                   \r\n                                |___|                                                                                   `\r\n            .replace(/ /g, 'z');\r\n\r\n        assert.strictEqual(captchaParser(a837), '378', beautifyError(a837, 378));\r\n    });\r\n\r\n\r\n});\r\n\r\ndescribe(\"random cases\", function () {\r\n    it(\"1 case for random\", function () {\r\n\r\n        var noiseChar = getRandomChar();\r\n\r\n        var xStep = getRandom(10, 15);\r\n        var yStep = getRandom(20, 25);\r\n\r\n        var xNumbers = getRandom(3, 5);\r\n        var yNumbers = getRandom(2, 4);\r\n\r\n        var x = xStep * xNumbers + maxOffset;\r\n        var y = yStep * yNumbers + maxOffset;\r\n        var str = '';\r\n        for (let i = 0; i < y; i++) {\r\n            for (let k = 0; k < x; k++) {\r\n                str += noiseChar;\r\n            }\r\n            if (i + 1 < y) {\r\n                str += '\\n';\r\n            }\r\n        }\r\n        var expected = [];\r\n        var matrix = str.split('\\n');\r\n        for (let i = getOffset(); i < x - xStep; i += xStep) {\r\n            for (let k = getOffset(); k < y - yStep; k += yStep) {\r\n                var curX = i;\r\n                var curY = k;\r\n                var expectedNum = getRandomNumber();\r\n                var num = numbers[expectedNum];\r\n                expected.push(expectedNum);\r\n                num.forEach(function (v, i) {\r\n                    var row = matrix[curY + i].split('');\r\n                    row.splice(curX, v.length, v);\r\n                    matrix[curY + i] = row.join('').replace(/ /g, getRandomChar());\r\n\r\n                })\r\n\r\n            }\r\n        }\r\n        str = matrix.join('\\n');\r\n        expected = expected.sort().join('');\r\n\r\n        assert.strictEqual(captchaParser(str), expected, beautifyError(str, expected));\r\n    });\r\n    it(\"2 case for random\", function () {\r\n\r\n        var noiseChar = getRandomChar();\r\n\r\n        var xStep = getRandom(11, 14);\r\n        var yStep = getRandom(22, 27);\r\n\r\n        var xNumbers = getRandom(10, 20);\r\n        var yNumbers = getRandom(3, 5);\r\n\r\n        var x = xStep * xNumbers + maxOffset;\r\n        var y = yStep * yNumbers + maxOffset;\r\n        var str = '';\r\n        for (let i = 0; i < y; i++) {\r\n            for (let k = 0; k < x; k++) {\r\n                str += noiseChar;\r\n            }\r\n            if (i + 1 < y) {\r\n                str += '\\n';\r\n            }\r\n        }\r\n        var expected = [];\r\n        var matrix = str.split('\\n');\r\n        for (let i = getOffset(); i < x - xStep; i += xStep) {\r\n            for (let k = getOffset(); k < y - yStep; k += yStep) {\r\n                var curX = i;\r\n                var curY = k;\r\n                var expectedNum = getRandomNumber();\r\n                var num = numbers[expectedNum];\r\n                expected.push(expectedNum);\r\n                num.forEach(function (v, i) {\r\n                    var row = matrix[curY + i].split('');\r\n                    row.splice(curX, v.length, v);\r\n                    matrix[curY + i] = row.join('').replace(/ /g, getRandomChar());\r\n\r\n                })\r\n\r\n            }\r\n        }\r\n        str = matrix.join('\\n');\r\n        expected = expected.sort().join('');\r\n\r\n        assert.strictEqual(captchaParser(str), expected, beautifyError(str, expected));\r\n    });\r\n    it(\"3 case for random\", function () {\r\n\r\n        var noiseChar = getRandomChar();\r\n\r\n        var xStep = getRandom(10, 15);\r\n        var yStep = getRandom(20, 25);\r\n\r\n        var xNumbers = getRandom(13, 23);\r\n        var yNumbers = getRandom(4, 6);\r\n\r\n        var x = xStep * xNumbers + maxOffset;\r\n        var y = yStep * yNumbers + maxOffset;\r\n        var str = '';\r\n        for (let i = 0; i < y; i++) {\r\n            for (let k = 0; k < x; k++) {\r\n                str += noiseChar;\r\n            }\r\n            if (i + 1 < y) {\r\n                str += '\\n';\r\n            }\r\n        }\r\n        var expected = [];\r\n        var matrix = str.split('\\n');\r\n        for (let i = getOffset(); i < x - xStep; i += xStep) {\r\n            for (let k = getOffset(); k < y - yStep; k += yStep) {\r\n                var curX = i;\r\n                var curY = k;\r\n                var expectedNum = getRandomNumber();\r\n                var num = numbers[expectedNum];\r\n                expected.push(expectedNum);\r\n                num.forEach(function (v, i) {\r\n                    var row = matrix[curY + i].split('');\r\n                    row.splice(curX, v.length, v);\r\n                    matrix[curY + i] = row.join('').replace(/ /g, getRandomChar());\r\n\r\n                })\r\n\r\n            }\r\n        }\r\n        str = matrix.join('\\n');\r\n        expected = expected.sort().join('');\r\n\r\n        assert.strictEqual(captchaParser(str), expected, beautifyError(str, expected));\r\n    });\r\n    it(\"4 case for random\", function () {\r\n\r\n        var noiseChar = getRandomChar();\r\n\r\n        var xStep = getRandom(14, 15);\r\n        var yStep = getRandom(25, 29);\r\n\r\n        var xNumbers = getRandom(15, 25);\r\n        var yNumbers = getRandom(6, 8);\r\n\r\n        var x = xStep * xNumbers + maxOffset;\r\n        var y = yStep * yNumbers + maxOffset;\r\n        var str = '';\r\n        for (let i = 0; i < y; i++) {\r\n            for (let k = 0; k < x; k++) {\r\n                str += noiseChar;\r\n            }\r\n            if (i + 1 < y) {\r\n                str += '\\n';\r\n            }\r\n        }\r\n        var expected = [];\r\n        var matrix = str.split('\\n');\r\n        for (let i = getOffset(); i < x - xStep; i += xStep) {\r\n            for (let k = getOffset(); k < y - yStep; k += yStep) {\r\n                var curX = i;\r\n                var curY = k;\r\n                var expectedNum = getRandomNumber();\r\n                var num = numbers[expectedNum];\r\n                expected.push(expectedNum);\r\n                num.forEach(function (v, i) {\r\n                    var row = matrix[curY + i].split('');\r\n                    row.splice(curX, v.length, v);\r\n                    matrix[curY + i] = row.join('').replace(/ /g, getRandomChar());\r\n\r\n                })\r\n\r\n            }\r\n        }\r\n        str = matrix.join('\\n');\r\n        expected = expected.sort().join('');\r\n\r\n        assert.strictEqual(captchaParser(str), expected, beautifyError(str, expected));\r\n    });\r\n\r\n});",

				exampleTestCases:
					"function beautifyError(captcha, expected) {\r\n    return `captchaParser for ${captcha} \\n\\n must return ${expected};`\r\n}\r\n\r\nvar assert= require('assert');\r\ndescribe(\"basic cases\", function () {\r\n    it(\"none\", function () {\r\n        let none = ` `;\r\n\r\n        assert.strictEqual(captchaParser(none), '', beautifyError(none, ''));\r\n    });\r\n\r\n    it(\"one\", function () {\r\n        let one = `    \r\n___ \r\n   |\r\n   |\r\n   |\r\n   |\r\n   |`;\r\n\r\n        assert.strictEqual(captchaParser(one), '1', beautifyError(one, 1));\r\n    });\r\n\r\n    it(\"two\", function () {\r\n        let two = `       \r\n____   \r\n    |  \r\n    |  \r\n    | /\r\n    |/ `;\r\n\r\n        assert.strictEqual(captchaParser(two), '2', beautifyError(two, 2));\r\n    });\r\n\r\n    it(\"three\", function () {\r\n        let three = `     \r\n____ \r\n   / \r\n  /  \r\n  \\\\ \r\n___\\\\ `;\r\n\r\n        assert.strictEqual(captchaParser(three), '3', beautifyError(three, 3));\r\n    });\r\n\r\n    it(\"four\", function () {\r\n        let four = `     \r\n   /|\r\n  / |\r\n /  |\r\n/___|\r\n    |\r\n    |`;\r\n\r\n        assert.strictEqual(captchaParser(four), '4', beautifyError(four, 4));\r\n    });\r\n\r\n    it(\"five\", function () {\r\n        let five = `     \r\n____|\r\n|    \r\n|___ \r\n    |\r\n____|`;\r\n\r\n        assert.strictEqual(captchaParser(five), '5', beautifyError(five, 5));\r\n    });\r\n\r\n    it(\"six\", function () {\r\n        let six = `      \r\n______\r\n|     \r\n|___  \r\n|   | \r\n|___| `;\r\n\r\n        assert.strictEqual(captchaParser(six), '6', beautifyError(six, 6));\r\n    });\r\n\r\n    it(\"seven\", function () {\r\n        let seven = `      \r\n______\r\n|   / \r\n   /  \r\n _/_  \r\n /    \r\n/     `;\r\n\r\n        assert.strictEqual(captchaParser(seven), '7', beautifyError(seven, 7));\r\n    });\r\n\r\n    it(\"eight\", function () {\r\n        let eight = `     \r\n____ \r\n|   |\r\n|___|\r\n|   |\r\n|___|`;\r\n\r\n        assert.strictEqual(captchaParser(eight), '8', beautifyError(eight, 8));\r\n    });\r\n\r\n    it(\"nine\", function () {\r\n        let nine = `        \r\n   ___  \r\n   |__|_\r\n      | \r\n      | \r\n |____| `;\r\n\r\n        assert.strictEqual(captchaParser(nine), '9', beautifyError(nine, 9));\r\n    });\r\n\r\n    it(\"one && five\", function () {\r\n        let oneAndFive = `                                                      \r\n        ___                                           \r\n           |                                          \r\n           |                                          \r\n           |                           ____|          \r\n           |                           |              \r\n           |                           |___           \r\n                                           |          \r\n                                       ____|          \r\n                                                      `;\r\n\r\n        assert.strictEqual(captchaParser(oneAndFive), '15', beautifyError(oneAndFive, 15));\r\n    });\r\n\r\n    it(\"six && two with noise\", function () {\r\n        let sixAndTwo = `                                                      \r\n                                                      \r\n                 ______                               \r\n                 |                                    \r\n                 |___                                 \r\n                 |   |                                \r\n                 |___|                                \r\n                                                      \r\n                                                      \r\n                                                      \r\n                 ____                                 \r\n                     |                                 \r\n                     |                                 \r\n                     | /                               \r\n                     |/                                \r\n                                                      \r\n                                                      `;\r\n\r\n        assert.strictEqual(captchaParser(sixAndTwo), '26', beautifyError(sixAndTwo, 26));\r\n    });\r\n});",
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
				tags: [
					{
						name: 'ALGORITHMS',
					},
					{
						name: ' PARSING',
					},
					{
						name: ' STRINGS',
					},
				],
			},
			{
				name: 'Pyramid Array',
				discipline: 'fundamentals',
				rank: 6,
				allowContributors: true,
				description:
					'Write a function that when given a number >= 0, returns an Array of ascending length subarrays.\n\n```pyramid(0) => [ ]\npyramid(1) => [ [1] ]\npyramid(2) => [ [1], [1, 1] ]\npyramid(3) => [ [1], [1, 1], [1, 1, 1] ]\n```\n\n\nNote: the subarrays should be filled with 1s',
				completeSolution:
					'function pyramid(n) {\r\n  const res = [];\r\n  for(let i = 0; i < n; i++){\r\n    res.push([...Array(i+1)].fill(1))\r\n  }\r\n  return res;\r\n}',
				initialSolution: 'function pyramid(n) {\r\n  // your code here\r\n}',
				testCases:
					'var assert = require(\'assert\');\r\ndescribe(\'basic tests\', () => {\r\n  it("Testing for 0", () => assert.deepEqual(pyramid(0), []));\r\n  it("Testing for 1", () => assert.deepEqual(pyramid(1), [[1]]));\r\n  it("Testing for 2", () => assert.deepEqual(pyramid(2), [[1], [1, 1]]));\r\n  it("Testing for 3", () => assert.deepEqual(pyramid(3), [[1], [1, 1], [1, 1, 1]]));\r\n});\r\n\r\ndescribe(\'random tests\', () => {\r\n  const sol = n => Array.from({ length: n }, (_, i) => Array(i + 1).fill(1));\r\n  for (let i = 0, n; i < 100; i++)\r\n    it("Testing for " + (n = Math.floor(Math.random() * 21)), () => assert.deepEqual(pyramid(n), sol(n)));\r\n});',
				exampleTestCases:
					'var assert = require(\'assert\');\r\ndescribe(\'basic tests\', () => {\r\n  it("Testing for 0", () => assert.deepEqual(pyramid(0), []));\r\n  it("Testing for 1", () => assert.deepEqual(pyramid(1), [[1]]));\r\n  it("Testing for 2", () => assert.deepEqual(pyramid(2), [[1], [1, 1]]));\r\n  it("Testing for 3", () => assert.deepEqual(pyramid(3), [[1], [1, 1], [1, 1, 1]]));\r\n});',
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
				tags: [
					{
						name: 'ALGORITHMS',
					},
				],
			},
			{
				name: 'Roman Numerals Encoder',
				discipline: 'practice',
				rank: 5,
				allowContributors: false,
				description:
					"Create a function taking a positive integer as its parameter and returning a string containing the Roman Numeral representation of that integer.\n\nModern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending order: MDCLXVI.\n\nExample:\n\n\tsolution(1000); // should return 'M'\n\nHelp:\n\n\tSymbol    Value\n\tI          1\n\tV          5\n\tX          10\n\tL          50\n\tC          100\n\tD          500\n\tM          1,000\n\nRemember that there can't be more than 3 identical symbols in a row.\n\nMore about roman numerals - [http://en.wikipedia.org/wiki/Roman_numerals](http://en.wikipedia.org/wiki/Roman_numerals)",
				completeSolution:
					"function solution(number){\r\n\tvar roman = {M:1000,CM:900, D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1 }\r\n\r\n\tvar ans = '';\r\n\twhile(number>0){\r\n\t\tfor(a in roman){\r\n\t\t\tif(roman[a]<=number){ ans += a; number-=roman[a]; break;}\r\n\r\n\t\t}\r\n\t}\r\n\treturn ans;",
				initialSolution: 'function solution(number){\r\n\t// convert the number to a roman numeral\r\n}',
				testCases:
					'var assert = require(\'assert\');\r\n\r\ndescribe("solution", () => {\r\n\tit ("should handle small numbers", () => {\r\n\t\tassert.strictEqual(solution(1), "I")\r\n\t\tassert.strictEqual(solution(2), "II")\r\n\t\tassert.strictEqual(solution(3), "III")\r\n\t\tassert.strictEqual(solution(4), "IV")\r\n\t\tassert.strictEqual(solution(5), "V")\r\n\t\tassert.strictEqual(solution(9),"IX")\r\n\t\tassert.strictEqual(solution(10), "X")\r\n\t\tassert.strictEqual(solution(11), "XI")\r\n\t\tassert.strictEqual(solution(19), "XIX")\r\n\t\tassert.strictEqual(solution(22), "XXII")\r\n\t\tassert.strictEqual(solution(15), "XV")\r\n\t});\r\n\r\n\tit ("should handle large numbers", () => {  \r\n\t\tassert.strictEqual(solution(1000), "M")\r\n\t\tassert.strictEqual(solution(1001), "MI")\r\n\t\tassert.strictEqual(solution(1990), "MCMXC")\r\n\t\tassert.strictEqual(solution(2007), "MMVII")\r\n\t\tassert.strictEqual(solution(2008), "MMVIII")\r\n\t\t});\r\n\t});',
				exampleTestCases:
					'var assert = require(\'assert\');\r\n\r\ndescribe("solution", () => {\r\n\tit ("should handle small numbers", () => {\r\n\t\tassert.strictEqual(solution(1), "I")\r\n\t\tassert.strictEqual(solution(2), "II")\r\n\t\tassert.strictEqual(solution(3), "III")\r\n\t\tassert.strictEqual(solution(4), "IV")\r\n\t\tassert.strictEqual(solution(5), "V")\r\n\t\tassert.strictEqual(solution(9),"IX")\r\n\t\tassert.strictEqual(solution(10), "X")\r\n\t\tassert.strictEqual(solution(11), "XI")\r\n\t\tassert.strictEqual(solution(19), "XIX")\r\n\t\tassert.strictEqual(solution(22), "XXII")\r\n\t\tassert.strictEqual(solution(15), "XV")\r\n\t});\r\n\r\n\tit ("should handle large numbers", () => {  \r\n\t\tassert.strictEqual(solution(1000), "M")\r\n\t\tassert.strictEqual(solution(1001), "MI")\r\n\t\tassert.strictEqual(solution(1990), "MCMXC")\r\n\t\tassert.strictEqual(solution(2007), "MMVII")\r\n\t\tassert.strictEqual(solution(2008), "MMVIII")\r\n\t\t});\r\n\t});',
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
				tags: [],
			},
			{
				name: 'Removing Elements',
				discipline: 'fundamentals',
				rank: 7,
				allowContributors: true,
				description:
					'Take an array and remove every second element from the array. \nAlways keep the first element and start removing with the next element.\n\n**Example:**\n\n```["Keep", "Remove", "Keep", "Remove", "Keep", ...] --> ```\n\n```["Keep", "Keep", "Keep", ...]```\n\n\nNone of the arrays will be empty, so you don\'t have to worry about that!',
				completeSolution:
					'function removeEveryOther(arr){\r\n  return arr.filter(function(elem, index) {\r\n    return index % 2 === 0;\r\n  });\r\n}',
				initialSolution: 'function removeEveryOther(arr){\r\n  //your code here\r\n}',
				testCases:
					"describe(\"Basic tests\",() =>{\r\n  it(\"Testing for fixed tests\", () => {\r\n    assert.deepEqual(removeEveryOther(['Hello', 'Goodbye', 'Hello Again']),['Hello', 'Hello Again']);\r\n    assert.deepEqual(removeEveryOther([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\r\n    assert.deepEqual(removeEveryOther([[1, 2]]), [[1, 2]]);\r\n    assert.deepEqual(removeEveryOther([['Goodbye'], {'Great': 'Job'}]),[['Goodbye']]);\r\n  })\r\n});\r\n\r\ndescribe(\"Random tests\",() =>{\r\n  \r\n  const randint=(a,b)=>~~(Math.random()*(b-a+1)+a);\r\n  \r\n  const sol=arr=>arr.filter((a,i)=>!(i%2));\r\n  \r\n  let base=\"abcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n  it(\"Testing for 40 random tests\", () => {\r\n    for (let i=0;i<40;i++){\r\n      let arr=Array.from({length:randint(1,36)},a=>base[randint(0,base.length-1)]);\r\n      assert.deepEqual(removeEveryOther(arr.slice()), sol(arr.slice()),`Testing for ${JSON.stringify(arr)}`);\r\n    }\r\n  });\r\n})",
				exampleTestCases:
					"describe(\"Basic tests\",() =>{\r\n  it(\"Testing for fixed tests\", () => {\r\n    assert.deepEqual(removeEveryOther(['Hello', 'Goodbye', 'Hello Again']),['Hello', 'Hello Again']);\r\n    assert.deepEqual(removeEveryOther([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);\r\n    assert.deepEqual(removeEveryOther([[1, 2]]), [[1, 2]]);\r\n    assert.deepEqual(removeEveryOther([['Goodbye'], {'Great': 'Job'}]),[['Goodbye']]);\r\n  })\r\n});",
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
				tags: [
					{
						name: 'FUNDAMENTALS',
					},
					{
						name: ' LISTS',
					},
					{
						name: ' DATA STRUCTURES',
					},
					{
						name: ' ARRAYS',
					},
				],
			},
			{
				name: 'Convert string to camel case',
				discipline: 'fundamentals',
				rank: 4,
				allowContributors: true,
				description:
					'Complete the method/function so that it converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, also often referred to as Pascal case).\n\n**Examples**\n\n```"the-stealth-warrior"``` gets converted to ```"theStealthWarrior"```\n\n```"The_Stealth_Warrior"``` gets converted to ```"TheStealthWarrior"```',
				completeSolution:
					'function toCamelCase(str){\r\n      var regExp=/[-_]\\w/ig;\r\n      return str.replace(regExp,function(match){\r\n            return match.charAt(1).toUpperCase();\r\n       });\r\n}',
				initialSolution: 'function toCamelCase(str){\r\n\r\n}',
				testCases:
					'var assert = require(\'assert\');\r\n\r\ndescribe("toCamelCase", function() {\r\n  it ("should handle empty values", function(){\r\n    assert.strictEqual(toCamelCase(\'\'), \'\', "An empty string was provided but not returned")\r\n  })\r\n  \r\n  it ("should remove underscores and convert first letter of word to upper case", function(){\r\n    assert.strictEqual(toCamelCase("the_stealth_warrior"), "theStealthWarrior", "toCamelCase(\'the_stealth_warrior\') did not return correct value")\r\n    assert.strictEqual(toCamelCase("The_stealth_warrior"), "TheStealthWarrior", "toCamelCase(\'The_stealth_warrior\') did not return correct value")\r\n  });\r\n  \r\n  it ("should remove hyphens and convert first letter of word to upper case", function(){\r\n    assert.strictEqual(toCamelCase("The-Stealth-Warrior"), "TheStealthWarrior", "toCamelCase(\'The-Stealth-Warrior\') did not return correct value")\r\n    assert.strictEqual(toCamelCase("the-Stealth-Warrior"), "theStealthWarrior", "toCamelCase(\'the-Stealth-Warrior\') did not return correct value")\r\n    assert.strictEqual(toCamelCase("A-B-C"), "ABC", "toCamelCase(\'A-B-C\') did not return correct value")\r\n    assert.strictEqual(toCamelCase("I-am-a-programmer"), "IAmAProgrammer")\r\n    assert.strictEqual(toCamelCase("i-am-a-programmer"), "iAmAProgrammer")\r\n  });\r\n});',
				exampleTestCases:
					'var assert = require(\'assert\');\r\ndescribe("Tests", () => {\r\n  it("test", () => {\r\n  assert.strictEqual(toCamelCase(\'\'), \'\', "An empty string was provided but not returned")\r\n  assert.strictEqual(toCamelCase("the_stealth_warrior"), "theStealthWarrior", "toCamelCase(\'the_stealth_warrior\') did not return correct value")\r\n  assert.strictEqual(toCamelCase("The-Stealth-Warrior"), "TheStealthWarrior", "toCamelCase(\'The-Stealth-Warrior\') did not return correct value")\r\n  assert.strictEqual(toCamelCase("A-B-C"), "ABC", "toCamelCase(\'A-B-C\') did not return correct value")\r\n  });\r\n});',
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
				tags: [
					{
						name: 'ALGORITHMS',
					},
					{
						name: ' REGULAR EXPRESSIONS',
					},
					{
						name: ' DECLARATIVE PROGRAMMING',
					},
					{
						name: ' ADVANCED LANGUAGE FEATURES',
					},
					{
						name: ' FUNDAMENTALS',
					},
					{
						name: ' STRINGS',
					},
				],
			},
			{
				name: 'Roman Numerals Decoder',
				discipline: 'practice',
				rank: 5,
				c: false,
				description:
					'Create a function that takes a Roman numeral as its argument and returns its value as a numeric decimal integer. You don\'t need to validate the form of the Roman numeral.\n\nModern Roman numerals are written by expressing each decimal digit of the number to be encoded separately, starting with the leftmost digit and skipping any 0s. So ```1990``` is rendered ```"MCMXC" (1000 = M, 900 = CM, 90 = XC)``` and ```2008``` is rendered ```"MMVIII" (2000 = MM, 8 = VIII)```. The Roman numeral for ```1666```, ```"MDCLXVI"```, uses each letter in descending order.\n\nExample:\n```\nsolution(\'XXI\'); // should return 21\n\n```\nHelp:\n\n```\nSymbol    Value\nI          1\nV          5\nX          10\nL          50\nC          100\nD          500\nM          1,000\n```\nCourtesy of rosettacode.org',
				completeSolution:
					"function solution(number){\r\n  // convert the number to a roman numeral\r\nvar  roman = {M:1000,CM:900, D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1 }\r\n\r\nvar ans = '';\r\nwhile(number>0){\r\n    for(a in roman){ \r\n        if(roman[a]<=number){ ans += a; number-=roman[a]; break;}\r\n            \r\n    }\r\n}\r\nreturn ans;\r\n}",
				initialSolution: 'function solution(number){\r\n  // convert the number to a roman numeral\r\n}',
				testCases:
					"var assert = require('assert')\r\n describe(\"solution\", () => {\r\n  it (\"should handle small numbers\", () => {\r\n    assert.strictEqual(solution(1), 'I', '1 should, \"I\"')\r\n    assert.strictEqual(solution(2), 'II', '2 should, \"II\"')\r\n    assert.strictEqual(solution(3), 'III', '3 should, \"III\"')\r\n    assert.strictEqual(solution(4), 'IV', '4 should, \"IV\"')\r\n    assert.strictEqual(solution(5), 'V', '5 should, \"V\"')\r\n    assert.strictEqual(solution(9), 'IX', '9 should, \"IX\"')\r\n    assert.strictEqual(solution(10), 'X', '10 should, \"X\"')\r\n    assert.strictEqual(solution(11), 'XI')\r\n    assert.strictEqual(solution(19), 'XIX')\r\n    assert.strictEqual(solution(22), 'XXII')\r\n    assert.strictEqual(solution(15), 'XV')\r\n  });\r\n  \r\n  it (\"should handle large numbers\", () => {\r\n    assert.strictEqual(solution(1000), 'M', '1000 should, \"M\"')\r\n    assert.strictEqual(solution(1001), 'MI', '1001 should, \"MI\"')\r\n    assert.strictEqual(solution(1990), 'MCMXC', '1990 should, \"MCMXC\"')\r\n    assert.strictEqual(solution(2007), 'MMVII', '2007 should, \"MMVII\"')\r\n    assert.strictEqual(solution(2008), 'MMVIII', '2008 should, \"MMVIII\"')\r\n  });\r\n  \r\n  it (\"random tests\", () => {\r\n    let Roman = {\r\n        map: [\r\n            1000, 'M', 900, 'CM', 500, 'D', 400, 'CD', 100, 'C', 90, 'XC',\r\n            50, 'L', 40, 'XL', 10, 'X', 9, 'IX', 5, 'V', 4, 'IV', 1, 'I',\r\n        ],\r\n        toRoman: function(n) {\r\n            let value = '';\r\n            for (let idx = 0; n > 0 && idx < this.map.length; idx += 2) {\r\n                while (n >= this.map[idx]) {\r\n                    value += this.map[idx + 1];\r\n                    n -= this.map[idx];\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n    };\r\n    \r\n    for(let i=0; i<100; i++) {\r\n      let n=1+Math.random()*3888|0;\r\n      assert.strictEqual(solution(n), Roman.toRoman(n));\r\n    }\r\n  });\r\n});",
				exampleTestCases:
					"describe(\"solution\", () => {\r\n  it (\"should handle small numbers\", () => {\r\n    assert.strictEqual(solution(1), 'I', '1 should, \"I\"')\r\n    assert.strictEqual(solution(2), 'II', '2 should, \"II\"')\r\n    assert.strictEqual(solution(3), 'III', '3 should, \"III\"')\r\n    assert.strictEqual(solution(4), 'IV', '4 should, \"IV\"')\r\n    assert.strictEqual(solution(5), 'V', '5 should, \"V\"')\r\n    assert.strictEqual(solution(9), 'IX', '9 should, \"IX\"')\r\n    assert.strictEqual(solution(10), 'X', '10 should, \"X\"')\r\n    assert.strictEqual(solution(11), 'XI')\r\n    assert.strictEqual(solution(19), 'XIX')\r\n    assert.strictEqual(solution(22), 'XXII')\r\n    assert.strictEqual(solution(15), 'XV')\r\n  });\r\n  \r\n  it (\"should handle large numbers\", () => {\r\n    assert.strictEqual(solution(1000), 'M', '1000 should, \"M\"')\r\n    assert.strictEqual(solution(1001), 'MI', '1001 should, \"MI\"')\r\n    assert.strictEqual(solution(1990), 'MCMXC', '1990 should, \"MCMXC\"')\r\n    assert.strictEqual(solution(2007), 'MMVII', '2007 should, \"MMVII\"')\r\n    assert.strictEqual(solution(2008), 'MMVIII', '2008 should, \"MMVIII\"')\r\n  });\r\n});",
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
			},
			{
				name: 'IP Validation',
				discipline: 'practice',
				rank: 7,
				allowContributors: false,
				description:
					'Write an algorithm that will identify valid IPv4 addresses in dot-decimal format. IPs should be considered valid if they consist of four octets, with values between 0 and 255, inclusive.\n\nValid inputs examples:\nExamples of valid inputs:\n```1.2.3.4\n123.45.67.89\n```\nInvalid input examples:\n\n```\n1.2.3\n1.2.3.4.5\n123.456.78.90\n123.045.067.089\n```\nNotes:\nLeading zeros (e.g. 01.02.03.04) are considered invalid\nInputs are guaranteed to be a single string',
				completeSolution:
					"function isValidIP(str) {\r\n  return str.split('.').filter(function(v){return v==Number(v).toString() && Number(v)<256}).length==4;\r\n}",
				initialSolution: 'function isValidIP(str) {\r\n  return false;\r\n}',
				testCases:
					"var assert = require('assert');\r\nassert.strictEqual(isValidIP(''), false);\r\nassert.strictEqual(isValidIP('abc.def.ghi.jkl'), false);\r\nassert.strictEqual(isValidIP('123.456.789.0'), false);\r\nassert.strictEqual(isValidIP('12.34.56'), false);\r\nassert.strictEqual(isValidIP('01.02.03.04'), false);\r\nassert.strictEqual(isValidIP('256.1.2.3'), false);\r\nassert.strictEqual(isValidIP('1.2.3.4.5'), false);\r\nassert.strictEqual(isValidIP('123,45,67,89'), false);\r\nassert.strictEqual(isValidIP('1e0.1e1.1e2.2e2'), false);\r\nassert.strictEqual(isValidIP(' 1.2.3.4'), false);\r\nassert.strictEqual(isValidIP('1.2.3.4 '), false);\r\nassert.strictEqual(isValidIP('12.34.56.-7'), false);\r\nassert.strictEqual(isValidIP('1.2.3.4\\n'), false);\r\nassert.strictEqual(isValidIP('\\n1.2.3.4'), false);\r\n\r\nassert.strictEqual(isValidIP('0.0.0.0'), true);\r\nassert.strictEqual(isValidIP('123.45.67.89'), true);\r\nassert.strictEqual(isValidIP('255.255.255.255'), true);\r\nassert.strictEqual(isValidIP('1.2.3.4'), true);\r\nassert.strictEqual(isValidIP('31.41.59.26'), true);\r\nassert.strictEqual(isValidIP('53.58.97.93'), true);\r\nassert.strictEqual(isValidIP('238.46.26.43'), true);\r\nassert.strictEqual(isValidIP('38.32.79.50'), true);\r\nassert.strictEqual(isValidIP('28.84.197.169'), true);\r\nassert.strictEqual(isValidIP('39.93.75.105'), true);\r\nassert.strictEqual(isValidIP('82.0.97.49'), true);\r\nassert.strictEqual(isValidIP('44.59.230.78'), true);\r\nassert.strictEqual(isValidIP('164.0.62.86'), true);\r\nassert.strictEqual(isValidIP('208.99.86.28'), true);\r\nassert.strictEqual(isValidIP('0.34.82.53'), true);\r\nassert.strictEqual(isValidIP('42.117.0.67'), true);\r\nassert.strictEqual(isValidIP('98.214.80.86'), true);\r\nassert.strictEqual(isValidIP('51.32.82.30'), true);\r\nassert.strictEqual(isValidIP('66.47.0.93'), true);\r\nassert.strictEqual(isValidIP('84.46.0.95'), true);\r\nassert.strictEqual(isValidIP('50.58.22.31'), true);\r\nassert.strictEqual(isValidIP('72.53.59.40'), true);\r\nassert.strictEqual(isValidIP('81.28.48.1'), true);\r\n\r\n\r\ndescribe(\"Random tests\", () => {\r\n  let letters = \"abcdefghijklm\";\r\n  let rnd = function(n) { return (Math.random() * n) | 0; };\r\n\r\n  for (let test = 0; test < 300; ++test) {\r\n  \r\n      let parts = [];\r\n      for (let i = 0; i < 4; ++i)\r\n          parts.push('' + rnd(256));\r\n  \r\n      let pos = rnd(4);\r\n      let i = rnd(4);\r\n      let someLetters = letters.substring(i, i + rnd(2) + 1);\r\n      let valid = false;\r\n      let route = rnd(12);\r\n      switch (route)\r\n      {\r\n          case 0: valid = true; break;\r\n          case 1: parts[pos] = ''; break;\r\n          case 2: parts[pos] = someLetters; break;\r\n          case 3: parts[pos] = rnd(44) + 256; break;\r\n          case 4: parts.splice(pos, 1); break;\r\n          case 5: parts.push('' + rnd(256)); break;\r\n          case 6: parts[0] = someLetters + parts[0]; break;\r\n          case 7: parts[3] += someLetters; break;\r\n          case 8: parts[rnd(2) + 1] += \" \"; break;\r\n          case 9: parts[pos] = \"-\" + parts[pos]; break;\r\n          case 10: parts[pos] = \"0\" + rnd(100); break;\r\n          case 11: parts[pos] = \"00\"; break;\r\n      }\r\n  \r\n      let ip = parts.join('.');\r\n      assert.strictEqual(!!isValidIP(ip), valid, \"Teste IP: \" + ip);\r\n  }\r\n});",
				exampleTestCases:
					"var assert = require('assert');\r\n\r\ndescribe(\"Sample tests\", () => {\r\n\r\n  assert.strictEqual(isValidIP(\"0.0.0.0\"), true);\r\n  assert.strictEqual(isValidIP(\"12.255.56.1\"), true);\r\n  assert.strictEqual(isValidIP(\"137.255.156.100\"), true);\r\n  \r\n  assert.strictEqual(isValidIP(''), false);\r\n  assert.strictEqual(isValidIP('abc.def.ghi.jkl'), false);\r\n  assert.strictEqual(isValidIP('123.456.789.0'), false);\r\n  assert.strictEqual(isValidIP('12.34.56'), false);\r\n  assert.strictEqual(isValidIP('01.02.03.04'), false);\r\n  assert.strictEqual(isValidIP('256.1.2.3'), false);\r\n  assert.strictEqual(isValidIP('1.2.3.4.5'), false);\r\n  assert.strictEqual(isValidIP('123,45,67,89'), false);\r\n  assert.strictEqual(isValidIP('1e0.1e1.1e2.2e2'), false);\r\n  assert.strictEqual(isValidIP(' 1.2.3.4'), false);\r\n  assert.strictEqual(isValidIP('1.2.3.4 '), false);\r\n  assert.strictEqual(isValidIP('12.34.56.-7'), false);\r\n  assert.strictEqual(isValidIP('1.2.3.4\\n'), false);\r\n  assert.strictEqual(isValidIP('\\n1.2.3.4'), false);\r\n});",
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
				tags: [
					{
						name: 'ALGORITHMS',
					},
					{
						name: ' REGULAR EXPRESSIONS',
					},
					{
						name: ' DECLARATIVE PROGRAMMING',
					},
					{
						name: ' ADVANCED LANGUAGE FEATURES',
					},
					{
						name: ' FUNDAMENTALS',
					},
					{
						name: ' STRINGS',
					},
				],
			},
			{
				name: 'Multiples of 3 or 5',
				discipline: 'fundamentals',
				rank: 5,
				allowContributors: true,
				description:
					'If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.  \n\nThe sum of these multiples is 23.\n\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. \n\nAdditionally, if the number is negative, return 0 (for languages that do have them).\n\nNote: If the number is a multiple of both 3 and 5, only count it once.\n\nCourtesy of projecteuler.net (Problem 1 https://projecteuler.net/problem=1)',
				completeSolution:
					'function solution(number){\r\n  var sum = 0;\r\n  \r\n  for(var i = 1;i< number; i++){\r\n    if(i % 3 == 0 || i % 5 == 0){\r\n      sum += i\r\n    }\r\n  }\r\n  return sum;\r\n}',
				initialSolution: 'function solution(number){\r\n  \r\n}',
				testCases:
					'const { assert } = require("chai")\r\n\r\nfunction test(n, expected) {\r\n  let actual = solution(n)\r\n  it(`Expected ${expected}, got ${actual}`, () => {  \r\n  assert.strictEqual(actual, expected)\r\n    })\r\n}\r\n\r\ndescribe("basic tests", function(){\r\n  test(10,23)\r\n  test(20,78)\r\n  test(200,9168)\r\n})\r\n\r\ndescribe("smallest cases", function() {\r\n  test(-1,0)\r\n  test(0,0)\r\n  test(1,0)\r\n  test(2,0)\r\n  test(3,0)\r\n  test(4,3)\r\n  test(5,3)\r\n  test(6,8)\r\n})\r\n\r\ndescribe("random cases", function() {\r\n  \r\n  function randint(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n  function _solution(number){\r\n    let sum = 0;\r\n    \r\n    for(let i = 1; i< number; i++){\r\n      if(i % 3 == 0 || i % 5 == 0){\r\n        sum += i\r\n      }\r\n    }\r\n    return sum;\r\n  }\r\n  \r\n  for(let i = 0; i < 100; i++) {\r\n    let rand = randint(0, 10**randint(1, 5))\r\n    test(rand, _solution(rand));\r\n  }\r\n})',
				exampleTestCases:
					'const { assert } = require("chai")\r\n\r\nfunction test(n, expected) {\r\n  let actual = solution(n)\r\n  it(`Expected ${expected}, got ${actual}`, () => {  \r\n  assert.strictEqual(actual, expected)\r\n    })\r\n}\r\n\r\ndescribe("basic tests", function(){\r\n  test(10,23)\r\n})',
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
				tags: [
					{
						name: 'ALGORITHMS',
					},
					{
						name: ' MATHEMATICS',
					},
					{
						name: ' NUMBERS',
					},
				],
			},
			{
				name: 'Pairs of integers from m to n',
				discipline: 'fundamentals',
				rank: 6,
				allowContributors: false,
				description:
					'Implement a function that receives two integers m and n and generates a sorted list of pairs (a, b) such that m <= a <= b <= n.\n\nExample:\n\n```\nm = 2\nn = 4\n\nresult = [(2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (4, 4)]\n```',
				completeSolution:
					'function generatePairs(m, n) {\r\n  let result = [];\r\n  for (let i = m; i <= n; i++)\r\n    for (let j = i; j <= n; j++)\r\n      result.push([i, j]);\r\n  return result;\r\n}',
				initialSolution: 'function generatePairs(m, n) {\r\n  \r\n}',
				testCases:
					'describe("Tests", () => {\r\n  it("test", () => {\r\nconst generatePairs_expected = (m, n) => {\r\n  let pairs = [];\r\n  for (let a = m; a <= n; a++) {\r\n    for (let b = a; b <= n; b++) {\r\n      pairs.push([a, b]);\r\n    }\r\n  }\r\n  return pairs;\r\n};\r\n\r\nlet m_;\r\n[ [0, 0],\r\n  [0, 5],\r\n  [2, 5],\r\n  [-5, -2],\r\n  [-20, 20],\r\n  [m_ = ~~(Math.random()*100)-50, m_+0],\r\n  [m_ = ~~(Math.random()*100)-50, m_+1],\r\n  [m_ = ~~(Math.random()*100)-25, m_+~~(Math.random()*100)] ]\r\n  .map(a => Test.assertSimilar(generatePairs(a[0], a[1]), generatePairs_expected(a[0], a[1])));\r\n  });\r\n});',
				exampleTestCases:
					'describe("Tests", () => {\r\n  it("test", () => {\r\nTest.assertSimilar(generatePairs(2, 4), [ [2, 2], [2, 3], [2, 4], [3, 3], [3, 4], [4, 4] ]);\r\n  });\r\n});',
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
			},
			{
				name: 'All Inclusive?',
				discipline: 'practice',
				rank: 6,
				allowContributors: false,
				description:
					'Input:\n\n- a string strng\n- an array of strings arr\n\nOutput of function contain_all_rots(strng, arr) (or containAllRots or contain-all-rots):\n\n- a boolean ```true``` if all rotations of ```strng``` are included in ```arr```\n- ```false``` otherwise\n\nExamples:\n```contain_all_rots(\n  "bsjq", ["bsjq", "qbsj", "sjqb", "twZNsslC", "jqbs"]) -> true\n```\n```contain_all_rots(\n  "Ajylvpy", ["Ajylvpy", "ylvpyAj", "jylvpyA", "lvpyAjy", "pyAjylv", "vpyAjyl", "ipywee"]) -> false)\n```\n\nNote:\nThough not correct in a mathematical sense \n\n- we will consider that there are no rotations of strng == ""\n- and for any array arr: contain_all_rots("", arr) --> true\n\nRef: https://en.wikipedia.org/wiki/String_(computer_science)#Rotations',
				completeSolution:
					'function containAllRots(str, arr) {\r\n  for (var i = 0; i < str.length; i++) {\r\n    if (arr.indexOf(str.slice(i) + str.slice(0, i)) === -1) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}',
				initialSolution: 'function containAllRots(strng, arr) {\r\n    // your code\r\n}',
				testCases:
					'var assert = require(\'assert\');\r\n\r\nfunction testing(actual, expected) {\r\n    assert.strictEqual(actual, expected);\r\n}\r\n\r\ndescribe("Basic tests",function() {\r\nit("containAllRots",function() {\r\n    testing(containAllRots("bsjq", ["bsjq", "qbsj", "sjqb", "twZNsslC", "jqbs"]), true)\r\n    testing(containAllRots("XjYABhR", ["TzYxlgfnhf", "yqVAuoLjMLy", "BhRXjYA", "YABhRXj", "hRXjYAB", "jYABhRX", "XjYABhR", "ABhRXjY"]), false)\r\n    testing(containAllRots("QJAhQmS", ["hQmSQJA", "QJAhQmS", "QmSQJAh", "yUgUXoQE", "AhQmSQJ", "mSQJAhQ", "SQJAhQm", "JAhQmSQ"]), true)\r\n    testing(containAllRots("Etsshp", ["nVOETcaxdvuk", "shpEts", "hpEtss", "Etsshp", "OuIiQ", "sXrDdPXIaW", "tsshpE", "pEtssh"]), false)\r\n    testing(containAllRots("Ajylvpy", ["Ajylvpy", "ylvpyAj", "jylvpyA", "lvpyAjy", "pyAjylv", "vpyAjyl"]), false)\r\n    testing(containAllRots("MqhWvHF", ["numMfygcH", "HFMqhWv", "qhWvHFM", "ZJKKxM", "hWvHFMq", "MqhWvHF", "hfZWYSqk", "BTcSoEdchPlL", "WvHFMqh", "vHFMqhW", "FMqhWvH"]), true)\r\n    testing(containAllRots("UDvG", ["vGUD", "UDvG", "GUDv", "DvGU"]), true)\r\n    testing(containAllRots("sObPfw", ["ObPfws", "Cofuhqrmmzq", "wFvfcqU", "sObPfw", "bPfwsO", "PfwsOb", "wsObPf", "fwsObP"]), true)\r\n    testing(containAllRots("KUckM", ["MKUck", "EDjfbQB", "GUPwzk", "SKZvilwnL", "UckMK", "KUckM", "kMKUc"]), false)\r\n    testing(containAllRots("FDIe", ["DIeF", "IeFD", "FDIe", "eFDI"]), true)\r\n    testing(containAllRots("12341234", ["DIeF", "IeFD", "12341234", "41234123", "34123412", "23412341"]), true)\r\n})})\r\n\r\ndescribe("Random tests",function() {\r\n\r\n    function randint(a, b) { \r\n        return Math.floor(Math.random() * (b - a + 1) + a); \r\n    }\r\n    //................\r\n    function rotationsSol65(strng) {\r\n        let result = new Set();\r\n        for (let index = 0; index < strng.length; index++) {\r\n            let rotatedString = strng.substring(index) + strng.substring(0, index);\r\n            if (result.has(rotatedString) === false) {\r\n                result.add(rotatedString);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function rotations_array(strng) {\r\n        let result = [];\r\n        for (let index = 0; index < strng.length; index++) {\r\n            let rotatedString = strng.substring(index) + strng.substring(0, index);\r\n            if (result.indexOf(rotatedString) === -1)\r\n                result.push(rotatedString);\r\n        }\r\n        return result;\r\n    }\r\n    function containAllRotsSol65(strng, arr) {\r\n        let r = rotationsSol65(strng);\r\n        let intersection = new Set(arr.filter(x => r.has(x)));\r\n        if (r.size !== intersection.size) return false;\r\n        for (let a of r) if (!intersection.has(a)) \r\n            return false;\r\n        return true;\r\n    }\r\n    function shuffle(a) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = a[i]; a[i] = a[j]; a[j] = tmp;\r\n        }\r\n        return a;\r\n    }\r\n    function doStr(k) {\r\n        let s = ""; let j = 0;\r\n        while (j < k) {\r\n            if (randint(0, 100) % 2 === 0) s += String.fromCharCode(randint(97, 122));\r\n            else s += String.fromCharCode(randint(65, 90));\r\n            j++;\r\n        }\r\n        return s;\r\n    }\r\n    function doEx(str) {\r\n        let rot = rotations_array(str);\r\n        let k = randint(0, 100);\r\n        if (k % 2 == 0) {\r\n            let t = randint(0, rot.length-1);\r\n            rot.splice(t, 1);\r\n        }\r\n        let n = randint(0, 5);\r\n        let i = 0;\r\n        while (i < n) {\r\n            rot.push(doStr(randint(5, 12)));\r\n            i++;\r\n        }\r\n        return shuffle(rot);\r\n    }    \r\n    //.................\r\n    \r\n    function tests_code() {\r\n        let i = 0;\r\n        while (i < 200) {\r\n            let a = doStr(randint(8, 15));\r\n            let r = doEx(a);\r\n            testing(containAllRots(a, r), containAllRotsSol65(a, r));\r\n            i++;\r\n        }\r\n    }\r\n    tests_code();\r\n})',
				exampleTestCases:
					'var assert = require(\'assert\');\r\n\r\nfunction testing(actual, expected) {\r\n    assert.strictEqual(actual, expected);\r\n}\r\n\r\ndescribe("Basic tests",function() {\r\nit("containAllRots",function() {\r\n    testing(containAllRots("", []), true)\r\n    testing(containAllRots("", ["bsjq", "qbsj"]), true)\r\n    testing(containAllRots("bsjq", ["bsjq", "qbsj", "sjqb", "twZNsslC", "jqbs"]), true)\r\n    testing(containAllRots("XjYABhR", ["TzYxlgfnhf", "yqVAuoLjMLy", "BhRXjYA", "YABhRXj", "hRXjYAB", "jYABhRX", "XjYABhR", "ABhRXjY"]), false)\r\n})})',
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
			},
			{
				name: 'Highest and lowest',
				discipline: 'rank-up',
				rank: 7,
				allowContributors: false,
				description:
					'**Description:**\n\nIn this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\n\n**Example:**\n\n```highAndLow("1 2 3 4 5");  // return "5 1"\nhighAndLow("1 2 -3 4 5"); // return "5 -3"\nhighAndLow("1 9 3 4 -5"); // return "9 -5"\n```\n\n**Notes:**\n\nAll numbers are valid Int32, no need to validate them.\nThere will always be at least one number in the input string.\nOutput string must be two numbers separated by a single space, and highest number is first.',
				completeSolution:
					"function highAndLow(numbers){\r\n  numbers = numbers.split(' ').map(Number);\r\n  return Math.max.apply(0, numbers) + ' ' + Math.min.apply(0, numbers);\r\n}",
				initialSolution: 'function highAndLow(numbers){\r\n  // ...\r\n}',
				testCases:
					'const chai = require("chai");\r\nconst assert = chai.assert;\r\nchai.config.truncateThreshold=0;\r\n\r\ndescribe("Basic tests", () => {\r\n  it("Testing for fixed tests", () => {\r\n    assert.strictEqual(highAndLow("4 5 29 54 4 0 -214 542 -64 1 -3 6 -6"), "542 -214");\r\n    assert.strictEqual(highAndLow("10 2 -2 -10"), "10 -10");\r\n    assert.strictEqual(highAndLow("1 -1"), "1 -1");\r\n    assert.strictEqual(highAndLow("1 1"), "1 1");\r\n    assert.strictEqual(highAndLow("-1 -1"), "-1 -1");\r\n    assert.strictEqual(highAndLow("1 -1 0"), "1 -1");\r\n    assert.strictEqual(highAndLow("1 1 0"), "1 0");\r\n    assert.strictEqual(highAndLow("-1 -1 0"), "0 -1");\r\n    assert.strictEqual(highAndLow("42"), "42 42");\r\n  });\r\n});\r\n\r\ndescribe("Random tests", function(){\r\n  let t = 10, rnd = Math.random;\r\n  \r\n  it("Testing for 10 random tests", () => {\r\n    while(t--){\r\n      let min = ~~(rnd()*1e4)-5e3, max = min+3e3+~~(rnd()*100), rr = [], exp = max+" "+min;\r\n      for( let i=1; i< 20; i++ ) rr.push(min+~~(rnd()*3e3));\r\n\r\n      rr = rr.slice(10).concat([min,max]).concat(rr.slice(0,10));\r\n      rr = rr.sort(function(){return rnd()<.5 ? 1:-1 }).join(" ");\r\n\r\n      assert.strictEqual(highAndLow(rr),exp, `Testing for str = ${JSON.stringify(rr)}`)\r\n    }\r\n  })\r\n});',
				exampleTestCases:
					'const chai = require("chai");\r\nconst assert = chai.assert;\r\nchai.config.truncateThreshold=0;\r\n\r\ndescribe("Basic tests", () => {\r\n  it("Testing for fixed tests", () => {\r\n    assert.strictEqual(highAndLow("8 3 -5 42 -1 0 0 -9 4 7 4 -4"), "42 -9");   \r\n  });\r\n});',
				status: 'approved',
				isPublished: true,
				user: {
					...(await usersRepository.getByEmail('test@test.com')),
				},
			},
		];
		await getRepository('task').save(exampleData);
	}

	public async down(queryRunner: QueryRunner): Promise<void> { }
}
